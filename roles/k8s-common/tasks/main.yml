- name: install needed packages
  apt:
    name: [apt-transport-https,linux-modules-extra-raspi]
    state: present

# This is Deprecated since we will be using Containerd.io
# - name: Add Docker-CE cert
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     state: present

# - name: Add Docker-CE repo
#   apt_repository:
#     repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu jammy stable
#     state: present
#     filename: 'docker-ce'

# - name: Add libcontainers stable cert
#   apt_key:
#     url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/Release.key
#     state: present

# - name: Add criostable cert
#   apt_key:
#     url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/xUbuntu_22.04/Release.key
#     state: present

# - name: Add libcontainers stable repo
#   apt_repository:
#     repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/ /
#     state: present
#     filename: 'libcontainers-table.list'

# - name: Add Crio stable repo
#   apt_repository:
#     repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/xUbuntu_22.04/ /
#     state: present
#     filename: 'crio-lib-stable.list'


# - name: Install Crio
#   apt:
#     name: ['cri-o', 'cri-o-runc', 'containernetworking-plugins']
#     state: present

- name: Install Containerd
  apt:
    name: ['containerd']
    state: present

- name: Create a containerd directory if it does not exist
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Check if the containerd default configuration is in place
  stat:
    path: /etc/containerd/config.toml
  register: containerd_config

- name: Make Default Containerd configuration file
  shell: "containerd config default > /etc/containerd/config.toml"
  register: daemon_config
  when: containerd_config.stat.exists == False

- name: Alter the containerd configuration file
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup \= false'
    replace: 'SystemdCgroup = true'
  register: daemon_config

- name: Add default socket to crictl
  copy:
    src: crictl.yaml
    dest: /etc/crictl.yaml
    owner: root
    group: root
  register: daemon_config

# - name: Docker deamon config
#   copy:
#     src: daemon.json
#     dest: /etc/docker/daemon.json
#     owner: root
#     group: root
#     mode: '0600'
#   register: daemon_config

- name: Add Kubernetes apt-key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes' APT repository
  apt_repository:
   repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
   state: present
   filename: 'kubernetes'

- name: Install kubelet
  apt:
    name: "kubelet={{ kubeadm_version }}"
    state: present
    update_cache: true

# - name: Add Kubelet/Kubeadm configuration
#   copy:
#     src: kubeadm.conf
#     dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
#     owner: root
#     group: root

- name: Install kubeadm
  apt:
    name: "kubeadm={{ kubeadm_version }}"
    state: present

- name: install nfs-common
  apt:
    name: nfs-common
    state: present

- name: Restart ContainerD
  systemd:
    name: containerd
    state: restarted
  when: daemon_config is changed
